"0","hts <- findOverlaps(qry, sbj)"
"0","hts"
"1","Hits"
"1"," object with "
"1","6"
"1"," hit"
"1","s"
"1"," and "
"1","0"
"1"," metadata column"
"1","s"
"1",":
"
"1","     "
"1"," queryHits"
"1"," subjectHits"
"1","
     "
"1"," <integer>"
"1","   <integer>"
"1","
  [1]"
"1","         1"
"1","           1"
"1","
  [2]"
"1","         1"
"1","           3"
"1","
  [3]"
"1","         2"
"1","           2"
"1","
  [4]"
"1","         3"
"1","           2"
"1","
  [5]"
"1","         4"
"1","           3"
"1","
  [6]"
"1","         5"
"1","           2"
"1","
"
"1","  "
"1","-------
"
"1","  "
"1","queryLength: "
"1","6"
"1"," / subjectLength: "
"1","3"
"1","
"
"0","names(qry)[queryHits(hts)]"
"1","[1]"
"1"," ""a"""
"1"," ""a"""
"1"," ""b"""
"1"," ""c"""
"1"," ""d"""
"1"," ""e"""
"1","
"
"0","names(sbj)[subjectHits(hts)]"
"1","[1]"
"1"," ""x"""
"1"," ""z"""
"1"," ""y"""
"1"," ""y"""
"1"," ""z"""
"1"," ""y"""
"1","
"
"0","#findOverlaps() is computing overlaps: a range is considered to be overlapping if any part of it overlaps a subject range. This type of overlap behavior is set with the type argument to findOverlaps() , which is ""any"" by default."
"0","#Depending on our biological task, type=""any"" may not be the best form of overlap.For example, we could limit our overlap results to only include query ranges that fall entirely within subject ranges with type=within"
"0","#While type=""any"" and type=""within"" are the most common options in day-to-day work, findOverlaps() supports other overlap types. See help(findOverlaps) to see the others (and much more information about findOverlaps() and related functions)."
"0","#Another findOverlaps() parameter that we need to consider when computing overlaps is select , which determines how findOverlaps() handles cases where a single query range overlaps more than one subject range. For example, the range named a in qry overlaps both x and y . By default, select=""all"" , meaning that all overlapping ranges are returned. In addition, select allows the options ""first"" , ""last"" , and ""arbitrary"", which return the first, last, and an arbitrary subject hit, respectively. Because the options ""first"" , ""last"" , and ""arbitrary"" all lead findOverlaps() to return only one overlapping subject range per query (or NA if no overlap is found), results are returned in an integer vector where each element corresponds to a query range in qry"
"0","findOverlaps(qry, sbj, select = ""first"")"
"1","[1]"
"1","  1"
"1","  2"
"1","  2"
"1","  3"
"1","  2"
"1"," NA"
"1","
"
"0","findOverlaps(qry, sbj, select = ""last"")"
"1","[1]"
"1","  3"
"1","  2"
"1","  2"
"1","  3"
"1","  2"
"1"," NA"
"1","
"
"0","findOverlaps(qry, sbj, select = ""arbitrary"")"
"1","[1]"
"1","  1"
"1","  2"
"1","  2"
"1","  3"
"1","  2"
"1"," NA"
"1","
"
