"0","# the reduce() operation takes a set of possibly overlapping ranges and reduces them to a set of nonoverlapping ranges that cover the same positions"
"0","# gaps() returns the gaps (uncovered portions) between ranges"
"0","# gaps() has numerous applications in genomics: creating intron ranges between exons ranges, finding gaps in coverage. defining intragenic regions between genic regions and more "
"0","# by default, gaps() only returns the gaps between ranges, and does not include those from the beginning of the sequence to the start position of the first range, and the end of the last range to the end of the sequence."
"0","# If youâ€™d like gaps() to include these gaps, specify the start and end positions in gaps (e.g., gaps(alns, start=1, end=60))."
"0","set.seed(0)"
"0","alns <- IRanges(start=sample(seq_len(50), 20), width=5)"
"0","head(alns, 5)"
"1","IRanges"
"1"," object with "
"1","5"
"1"," "
"1","ranges"
"1"," and "
"1","0"
"1"," metadata "
"1","columns"
"1",":
"
"1","     "
"1","     start"
"1","       end"
"1","     width"
"1","
     "
"1"," <integer>"
"1"," <integer>"
"1"," <integer>"
"1","
  [1]"
"1","        45"
"1","        49"
"1","         5"
"1","
  [2]"
"1","        14"
"1","        18"
"1","         5"
"1","
  [3]"
"1","        18"
"1","        22"
"1","         5"
"1","
  [4]"
"1","        27"
"1","        31"
"1","         5"
"1","
  [5]"
"1","        42"
"1","        46"
"1","         5"
"1","
"
"0","reduce(alns)"
"1","IRanges"
"1"," object with "
"1","3"
"1"," "
"1","ranges"
"1"," and "
"1","0"
"1"," metadata "
"1","columns"
"1",":
"
"1","     "
"1","     start"
"1","       end"
"1","     width"
"1","
     "
"1"," <integer>"
"1"," <integer>"
"1"," <integer>"
"1","
  [1]"
"1","         3"
"1","        22"
"1","        20"
"1","
  [2]"
"1","        24"
"1","        36"
"1","        13"
"1","
  [3]"
"1","        40"
"1","        53"
"1","        14"
"1","
"
"0","b.r <- plotIRanges(alns) + xlim(0,60) + ylim(0,8) + ggtitle(""alns"") + theme(plot.title = element_text(hjust = 0.5))"
"2","Scale for 'x' is already present. Adding another scale for 'x', which will replace
the existing scale.
"
"0","a.r <- plotIRanges(reduce(alns))+ xlim(0,60) + ylim(0,8) + ggtitle(""reduce(alns)"") + theme(plot.title = element_text(hjust = 0.5))"
"2","Scale for 'x' is already present. Adding another scale for 'x', which will replace
the existing scale.
"
"0","a.g <- plotIRanges(gaps(alns))+ xlim(0,60) + ylim(0,8) + ggtitle(""gaps(alns)"") + theme(plot.title = element_text(hjust = 0.5))"
"2","Scale for 'x' is already present. Adding another scale for 'x', which will replace
the existing scale.
"
"0","grid.arrange(b.r, a.r, a.g)"
