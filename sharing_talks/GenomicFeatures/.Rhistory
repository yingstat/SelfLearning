plot(cars)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("GenomicRanges", version = "3.8")
library(IRanges)
IRanges(start = 4, end = 13)
rng <- IRanges(start = 1:10, end = 21:30)
rng
names(rng) <-LETTERS[1:10]
rng
class(x)
class(rng)
start(rng)
end()
end(rng)
range(rng)
width(rng)
end(rng)
start(rng)
start(rng)+1
rng
rng[1:3]
rng["C"]
rng[start(rng) > 5]
rng1 <- IRanges(start = 1, width = 100)
rng2 <- IRanges(start = 3, end = 123)
rng1
rng2
merge(rng1, rng2)
c(rng1, rng2)
rng + 4L
rng + 4
rng + 4L
rng + 4L
rng + 4
rng - 4
rng
# restrict()
restrict(rng, start = 4, end = 10)
rng
rng <- IRanges(start = 1:10, width = 10)
rng
names(rng) <-LETTERS[1:10]
rng
start(rng)
end(rng)
width(rng)
range(rng)
start(rng) + 1
rng[1:3]
rng["C"]
rng[start(rng) > 5]
rng + 4
rng - 4
# restrict()
restrict(rng, start = 4, end = 10)
rng1 <- IRanges(start = 1, width = 100)
rng2 <- IRanges(start = 3, end = 123)
c(rng1, rng2)
# flank()
flank(rng, width = 3)
rng
# flank()
flank(rng, width = 5)
rng
# flank()
flank(rng, width = 5, start = FALSE)
?flank
# flank()
flank(rng, width = 5, both = TRUE)
rng
shift(rng, shift = 2)
shift()
# shift() shifts all the ranges in x by the amount specified by the shift argument.
shift(rng, shift = -2)
# shift() shifts all the ranges in x by the amount specified by the shift argument.
shift(rng, shift = 2)
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,3)
rng
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,1,2)
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,1,2,2)
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,1,10)
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,1,9)
rng
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,start = 5, end = 8)
# narrow() the ranges in x i.e. each range in the returned IntegerRanges object is a subrange of the corresponding range in x. The supplied start/end/width values are solved by a call to solveUserSEW(width(x), start=start, end=end, width=width) and therefore must be compliant with the rules of the SEW (Start/End/Width) interface (see ?solveUserSEW for the details). Then each subrange is derived from the original range according to the solved start/end/width values for this range. Note that those solved values are interpreted relatively to the original range.
narrow(rng,width = 1)
# resize() resizes the ranges to the specified width where either the start, end, or center is used as an anchor.
resize(rng, width = 5, fix = "start" )
# resize() resizes the ranges to the specified width where either the start, end, or center is used as an anchor.
resize(rng, width = 5, fix = "center" )
rng
# resize() resizes the ranges to the specified width where either the start, end, or center is used as an anchor.
resize(rng, width = 5, fix = "center")
# resize() resizes the ranges to the specified width where either the start, end, or center is used as an anchor.
resize(rng, width = 5, fix = "start")
?reduce
x <- IRanges(start = c(10, 8, 13, 5), width = 10)
x
reduce(x)
x
tss <- IRanges(start = 1:20, width = 1)
promoters(tss)
sample(seq_len(50),20)
?seq_len()
seq_len(100)
seq(100)
x <- IRanges(start = sample(seq(100),10), width = 10)
x
reduce(x)
x
reduce(x)
x <- IRanges(start = c(10, 8, 13, 5), width = 10)
x
reduce(x)
x <- IRanges(start = sample(seq(100),4), width = 10)
x
reduce(x)
x <- IRanges(start = (3,19,2,4), width = 10)
x <- IRanges(start = c(3,19,2,4), width = 10)
x
reduce(x)
gaps(x)
x
reduce(x)
gaps(x)
x <- IRanges(start = 1:6, width = 10)
x
reduce(x)
gaps(x)
x <- IRanges(start = seq(1:22,2), width = 10)
?seq
x <- IRanges(start = seq(1:22,by = 2), width = 10)
x <- IRanges(start = seq(1,10 ,by = 2), width = 10)
x
reduce(x)
gaps(x)
x <- IRanges(start = sample(seq(10),3), width = 10)
x
# reduce() first orders the ranges in x from left to right, then merges the overlapping or adjacent ones.
set.seed(123)
x <- IRanges(start = sample(seq(10),3), width = 10)
x
reduce(x)
gaps(x)
x <- IRanges(start = sample(seq(20),3), width = 10)
x
reduce(x)
gaps(x)
?gaps
disjoin(x)
x
disjoin(x)
disjoin(x)
qry <- IRanges(start = 1:100, width = 20)
qry
sbj <- IRanges(start = sample(seq(100), 5), width = 10)
sbj
hts <- findOverlaps(qry, sbj)
sbj
sbj <- IRanges(start = sample(seq(500), 5), width = 10)
qry <- IRanges(start = 1:100, width = 20)
sbj <- IRanges(start = sample(seq(500), 5), width = 10)
hts <- findOverlaps(qry, sbj)
hts
sbj
qry
qry <- IRanges(start = seq(1, 1000, 10), width = 20)
qry
sbj <- IRanges(start = sample(seq(500), 5), width = 10)
sbj
qry
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 20)
sbj <- IRanges(start = c(1, 30, 5), end = c(3, 40, 8))
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 3)
sbj <- IRanges(start = c(1, 30, 5), end = c(3, 40, 8))
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 3)
sbj <- IRanges(start = c(1, 2, 5), end = c(3, 4, 8))
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 3)
sbj <- IRanges(start = c(1, 12, 15), end = c(3, 14, 18))
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 1)
sbj <- IRanges(start = c(1, 12, 15), width = 50)
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
split(queryHits(hts), subjectHits(hts))
qry <- IRanges(start = 1:50, width = 1)
sbj <- IRanges(start = c(1, 12, 15), width = 50)
hts <- findOverlaps(qry, sbj)
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 1)
sbj <- IRanges(start = c(1, 12, 15), width = 50)
hts <- findOverlaps(qry, sbj)
split(queryHits(hts), subjectHits(hts))
qry
sbj
hts
qry <- IRanges(start = 1:10, width = 1)
sbj <- IRanges(start = c(1, 3, 5), width = 50)
hts <- findOverlaps(qry, sbj)
split(queryHits(hts), subjectHits(hts))
hts
as.integer(names(split(queryHits(hts), subjectHits(hts))))
split(queryHits(hts), subjectHits(hts))
tss <- IRanges(start = 1:10, width = 1)
promoter <- IRanges(start = c(1, 3, 5), width = 50)
promoter
reduce(promoter)
tss <- IRanges(start = 1:10, width = 1)
promoter <- IRanges(start = 1:10, width = 50)
tss
promoter
ov <- findOverlaps(tss, promoter)
ov
split(queryHits(ov), subjectHits(ov))
promoter[as.integer(names(split(queryHits(hts), subjectHits(hts))))]
promoter
a <- IRanges(start = 1:10, width = 1)
b <- IRanges(start = 1:10, width = 50)
ov <- findOverlaps(a,b)
split(queryHits(ov), subjectHits(ov))
b <- reduce(b)
b
a <- IRanges(start = 1:10, width = 1)
b <- IRanges(start = sample(seq(10),3), width = 50)
b
b <- reduce(b)
b
ov <- findOverlaps(a,b)
ov
a <- IRanges(start = 1:50, width = 1)
b <- IRanges(start = sample(seq(10),3), width = 50)
b <- reduce(b)
a
b
a <- IRanges(start = 1:50, width = 1)
b <- IRanges(start = sample(seq(10),5), width = 50)
b <- reduce(b)
b
a <- IRanges(start = 1:50, width = 1)
b <- IRanges(start = sample(seq(10),5), width = 10)
b <- reduce(b)
b
a
a
b
b <- reduce(b)
ov <- findOverlaps(a,b)
split(queryHits(ov), subjectHits(ov))
a <- IRanges(start = 1:50, width = 1)
b <- IRanges(start = sample(seq(10),5), width = 10)
b <- reduce(b)
ov <- findOverlaps(a,b)
split(queryHits(ov), subjectHits(ov))
a <- IRanges(start = 1:50, width = 1)
b <- IRanges(start = sample(seq(100),5), width = 10)
b <- reduce(b)
b
ov <- findOverlaps(a,b)
ov
split(queryHits(ov), subjectHits(ov))
qry <- IRanges(start = 1:50, width = 1)
sbj <- IRanges(start = sample(seq(100),5), width = 10)
sbj
sbj <- reduce(sbj)
sbj
ov <- findOverlaps(qry,sbj)
ov
split(queryHits(ov), subjectHits(ov))
qry <- IRanges(start = 1:50, width = 1)
sbj <- IRanges(start = sample(seq(100),10), width = 10)
sbj
sbj <- reduce(sbj)
sbj
ov <- findOverlaps(qry,sbj)
ov
split(queryHits(ov), subjectHits(ov))
qry <- IRanges(start = seq(1,20,4), width = 1)
qry
sbj <- IRanges(start = seq(1,20,4), width = 2)
sbj
sbj <- reduce(sbj)
sbj
ov <- findOverlaps(qry,sbj)
ov
qry <- IRanges(start = seq(1,20,4), width = 1)
qry
sbj <- IRanges(start = seq(1,20,4), width = 3)
sbj
sbj <- reduce(sbj)
sbj
qry <- IRanges(start = seq(1,20,4), width = 1)
qry
sbj <- IRanges(start = seq(1,20,4), width = 5)
sbj
sbj <- reduce(sbj)
sbj
qry <- IRanges(start = seq(1,20,10), width = 1)
qry
sbj <- IRanges(start = seq(1,20,10), width = 5)
sbj
sbj <- reduce(sbj)
sbj
qry <- IRanges(start = seq(1,10,3), width = 1)
qry
sbj <- IRanges(start = seq(1,10,3), width = 5)
sbj
sbj <- reduce(sbj)
sbj
qry <- IRanges(start = seq(1,10,3), width = 1)
qry
sbj <- IRanges(start = seq(1,10,3), width = 3)
sbj
sbj <- reduce(sbj)
sbj
qry <- IRanges(start = seq(1,10,3), width = 1)
qry
sbj <- IRanges(start = seq(1,10,3), width = 2)
sbj
ov <- findOverlaps(qry,sbj)
ov
?findOverlaps
example("findOverlaps")
query <- IRanges(c(1, 4, 9), c(5, 7, 10))
subject <- IRanges(c(2, 2, 10), c(2, 3, 12))
query
subject
reduce(subject)
findOverlaps(query, subject)
query <- IRanges(c(1, 4, 9), c(5, 7, 10))
subject <- IRanges(c(2, 2, 10), c(2, 3, 12))
query
subject
ov
ov <- findOverlaps(query, subject)
ov
split(queryHits(ov), subjectHits(ov))
query
subject
ov
queryHits(ov)
subjectHits(ov)
?nearest
nearest(query,subject)
nearest(query)
library(AnnotationHub)
ahub = AnnotationHub()
ahub = AnnotationHub()
ahub = subset(ahub,species =="Homo sapiens")
qhs = query(ahub,c("H3K4me3","Gm12878"))
gr1 = qhs[[4]]
qhs = query(ahub,"RefSeq")
genes = qhs[[1]]
genes = qhs[[1]]
prom = promoters(genes)
prom
# if (!requireNamespace("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("GenomicRanges", version = "3.8")
library(IRanges)
#The ranges we create with the IRanges package are called IRanges objects
rng <- IRanges(start = 1:10, width = 10)
rng
names(rng) <-LETTERS[1:10]
rng
source(plot-ranges.R)
source(./codes/plot-ranges.R)
source("./codes/plot-ranges.R")
getwd()
source(./codes/plot-ranges.R)
?source
source("./codes/plot-ranges.R", local = TRUE)
if(!exists("foo", mode="function")) source("./codes/plot-ranges.R")
source("./codes/plot-ranges.R")
source("./codes/plot-ranges.R")
source("./codes/plot-ranges.R")
source("./codes/plot-ranges.R")
